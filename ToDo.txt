FIX:

- App crashing after new post. Editing post content in db fixes it. WTF?
- Forum dirname must be unique, add constrain to db
- User nick must be unique, add constrain to db
x Fix timeago in dateUtils for use in templates

TODO:

- work on error pages: https://devcenter.heroku.com/articles/error-pages
- Change PROCFILE back to production!!!
~ try catch everywhere. App is crashing randomly.
~ use markdown.js for in-place edit 
x fix login
- deploy v1

~ on new thread: question? message? page? wiki (markdown)?
x try catch markdown parse errors
- change cookie:nick for uuid token to avoid impersonation
x login cookies never expire, remove if user logs out
- don't delete posts/replies, hide them
- move admin stuff to external swift app sharing same db (try kitura?)
- Work on login async validation
- get stats once a day, cron job?

? install docker for testing swift on ubuntu just like heroku
x Use latest Vapor version 1.3.2

- Vote up/dn, color icons, send to server
- Show permalink in every post and reply for easy sharing
x post new message
? question, answered, message, poll, job, app icons, default is message (chat bubble)
- add some users to test
- add some messages to every forum
? hot topic (red question|message|poll icon > 10 messages)



------------------------------------------------------------

x allow in-place editing/saving
  x web request and callback for saving/deleting
x show help for markdown formatting in new post/reply
x fix plurals everywhere
x use stars instead of votes, no downvoting allowed
x get clientid, secret from ENV not from secrets on heroku for every app, dev/live/prod
x clear logs from admin/logs, add link to "Clear logs" -> /admin/clearlogs then redirect to admin/logs
x fix login, get code from github oauth, get user info, save in session + cookies
x Detect dev/live/production by host not by config
x if logged, allow to post in listing, show textarea and submit button
x Log to db 

x index:
  x list latest 50 messages from all forums
  x list forums on the sidebar
x on forum: show last messages for that forum
x on message: show all replies, allow new reply

x Authentication:
  x github oAuth?
  x save nick, token in cookies, hidden field in forms
  ? reddit oAuth?
  ? userid + pass + gmail

x FetchUser not working live, debug step by step in registerhandler!!!
x Markdown not compiling on heroku ???
x test markdown again, enable in templates

x Github authentication
x test credential secrets are set correctly for live, dev and local
x remove authToken, userInfo from authorization, use code to verify or error to deny
x Save user token, user info in user session
x save cookies for nick and user when loggin in
x save oauth code in user table for future logins

x register user, get github nick, 
x Double entry in users table on login/register !!!
x fetch api.github.com/users/{nick} for name, avatar, save in db
x on save: redirect to github for login 

x Markdown library
x Add template tag for markdown
x Add actionbar below header for username, messages, actions
x Remove table, use LI in index list
x time ago in last posts. make ago(time) extension
x no avatar for now, just like reddit
x add forum info, forums list, user info to default DataNode for use in all templates
x use DataNode with defaults in base template
x add all forums to db
x App breaking if db not available. Fail gracefuly
x Test Heroku postgres
~ Design database
? Create database on /admin/install
? database.runJob(sql)
x Remove /admin/install. Heroku does not allow String(contentsOfFile:...)
x instead of running sql jobs, create DB manually
x database.verifyIntegrity, if not exists, create db, tables, populate, save flag
x Fail.dataStoreError, design Fail system like vapor's Abort.notFound

------------------------------------------------------------

Stages:

1. Main forum, posts, messages
2. Extended user profile with avatars and stuff
3. Configurability for external installation
4. Moderation tools
5. Admin tools

------------------------------------------------------------

Nodes suck donkey balls

node.string
node.int
node.array
node.object

// loop rows from db
for item in rows.array! {
	let val = item.object!["name"]!.string! // WTF???
}
